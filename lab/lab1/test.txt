[!] testing sample 'M1'
[fail] 'M1'
given stdout in test 'M1':
int main()
{
  int i = 1;
  int j = ~i;
}
Program (1)

[!] testing sample 'M2'
[fail] 'M2'
given stdout in test 'M2':
int main()
{
  float a[10][2];
  int i;
  a[5,3] = 1.5;
  if (a[1][2] == 0) i = 1 else i = 0;
}
Program (1)

[!] testing sample 'M3'
[fail] 'M3': expected 'Program (1)' at line 1, but given 'int inc()'
[fail] 'M3'
given stdout in test 'M3':
int inc()
{
  int i;
  i = i + 1;
}
Program (1)

[!] testing sample 'M4'
[fail] 'M4': expected 'Program (1)' at line 1, but given 'struct Complex'
[fail] 'M4'
given stdout in test 'M4':
struct Complex
{
  float real, image;
};
int main()
{
  struct Complex x;
  y.image = 3.5;
}
Program (1)

[!] testing sample 'O1-1'
[fail] 'O1-1': expected 'Program (1)' at line 1, but given 'int main()'
[fail] 'O1-1'
given stdout in test 'O1-1':
int main()
{
  int i = 0123;
  int j = 0x3F;
}
Program (1)

[!] testing sample 'O1-2'
[fail] 'O1-2'
given stdout in test 'O1-2':
int main()
{
  int i = 09;
  int j = 0x3G;
}
Program (1)

[!] testing sample 'O2-1'
[fail] 'O2-1': expected 'Program (1)' at line 1, but given 'int main()'
[fail] 'O2-1'
given stdout in test 'O2-1':
int main()
{
  float i = 1.05e-4;
}
Program (1)

[!] testing sample 'O2-2'
[fail] 'O2-2'
given stdout in test 'O2-2':
int main()
{
  float i = 1.05e;
}
Program (1)

[!] testing sample 'O3-1'
[fail] 'O3-1': expected 'Program (1)' at line 1, but given 'int main()'
[fail] 'O3-1'
given stdout in test 'O3-1':
int main()
{
  // line comment
  /*
  block comment
  */
  int i = 1;
}
Program (1)

[!] testing sample 'O3-2'
[fail] 'O3-2'
given stdout in test 'O3-2':
int main()
{
  /*
  comment
  /*
  nested comment
  */
  */
  int i = 1;
}
Program (1)

[summary-of-sample-tester] the code passed sample test 0/10

[!] testing 'A-1'
[fail] 'A-1'
given stdout in test 'A-1':
int main () {
  int i = 1.100;
  float f = 1;
  int j = i * f + 1.00.1;
}
Program (1)

[!] testing 'A-2'
[fail] 'A-2'
given stdout in test 'A-2':
int f0o() {
  return 0;
}
int main() {
  int 1i = f0o();
}
Program (1)

[!] testing 'A-3'
[fail] 'A-3'
given stdout in test 'A-3':
struct {
  int x;
  int y;
  int z;
} s1, s2;
int foo() {
  struct s int;
}
Program (1)

[!] testing 'A-4'
[fail] 'A-4'
given stdout in test 'A-4':
int i, j, k;
int a[100];
float f = 1.00;
int hello() {
  int a[100];
}
Program (1)

[!] testing 'A-5'
[fail] 'A-5'
given stdout in test 'A-5':
int foo() {
  int i, j;
  i = 0;
  j = (i * 5 + 42) / 23;
  float f;
  return i;
}
Program (1)

[!] testing 'A-6'
[fail] 'A-6'
given stdout in test 'A-6':
struct Car {
  int color;
  float weight;
};
struct Fee {
  Car car;
  int count;
};
int main() {
  struct Car car;
  car.color = 0;
  car.weight = 1.111;
}
Program (1)

[!] testing 'A-7'
[fail] 'A-7'
given stdout in test 'A-7':
int a1[100];
int a2[100];
int init(int a[100]) {
  int i;
  while (i < 100) {
    a[i] = i;
    i = i + 1;
  }
}
int add(int a[100], int b[100]) {
  int i = 0;
  int res[100];
  while (i < 100) {
    res[i] = a[i] + b[i];
    i += 1;
  }
}
int main() {
  init(a1);
  init(a2);
  add(a1, a2);
}
Program (1)

[!] testing 'A-8'
[fail] 'A-8'
given stdout in test 'A-8':
struct Oops say() {
  struct Point {
    int x;
    int y;
    int z;
  } p1, p2;
  return 0;
}
int;
int;
struct st {
  int s1;
  float s2;
  struct st s3, s4;
  int arr[10.0];
};
Program (1)

[!] testing 'A-9'
[fail] 'A-9'
given stdout in test 'A-9':
int turn;
int flag[2];
int doSth() {
  int i = 0;
  while (i < 42) {
    i = i + 1;
  }
}
int t1() {
  turn = 1;
  while (flag[1] == 1 && turn == 1) {
  }
  doSth();
  flag[0] = 0;
}
int t2() {
  turn = 0; 
  while (flag[0] == 1 && turn == 0);
  doSth();
  flag[1] = 0;
}
Program (1)

[!] testing 'A-10'
[fail] 'A-10'
given stdout in test 'A-10':
int a[10][10];
int b[10][10];
struct container {
  int res;
  int cnt;
  float avg;
  int sum[10];
};
int comp(int a[10][10], int b[10][10]) {
  if (a[5][3] > a[2][1]) {
    return a[0][0];
  } else if (a[1][2] > b[0][1]) {
    return b[1][1];
  } else {
    return b[4][4];
  }
}
int cal() {
  int i = 0;
  int j = 0;
  int res;
  struct container ct;
  while (i < 10) {
    while (j < 10) {
      res = res + a[i][j] * b[i][j];
      j = j + 1;
    }
    i = i + 1;
  }
  ct.res = res;
  ct.cnt = i * j;
  ct.avg = ct.res / ct.cnt;
  i = 0;
  j = 0;
  while (i < 10) {
    ct.sum[i] = 0;
    while (j < 10) {
      ct.sum[i] = ct.sum[i,] + a[i][j] + b[i][j];
      j = j + 1;
    }
    i = i + 1;
  }
}
Program (1)

[!] testing 'B-1'
[fail] 'B-1'
given stdout in test 'B-1':
int _a0_b1(int arr[10], float x, int y) {
  int i = 0, j = -1; int k = 1--2*3;
  struct ss {
    float ff;
    int _i, _j, _k;
    struct {
      int a, b;
    } s;
  } s1, s2;
  while (i < 10) {
    if (a > b) {
      return 1 + 2 / (a - b) + 3 * 3.14;
    } else {
      int tmp = a;
      a = a + b;
      b = b - tmp;
      return a * b * tmp;
    }
    ;
    i = i + 1;
  }
}
int _F_o__0(struct { int i; int j; } ss, float f, int i) {
  int a[100];
  float b[100];
  ss.i = 0h;
  ss.j = 100;
  while (true) {
    a[ss.i] = b[ss.i];
    ss.i = ss.i + 1;
    if (ss.i >= 100) {
      return a[ss.i - 1,];
    }
  }
  ss.j = ss.i + ss.j;
}
Program (1)

[!] testing 'B-2'
[fail] 'B-2'
given stdout in test 'B-2':
struct Info {
  int amount;
  int level;
  int fee;
};
struct Info calculate(struct Info input, int a, int l) {
  struct Info res;
  if (a > 0) {
    res.amount = a;
  } else {
    res.amount = input.amount;
  }
  if (l > 0) {
    res.level = l;
  } else {
    res.level = input.level;
  }
  if (res.level = 0) {
    res.fee = ----430.43;
  } else if (res.level = = 1) {
    res.fee = (res.amount - 43.33) * res.level + 43.33 * (res.level + 1);
  } else if (res.level == 2) {
    res.fee = res.amount / 3 + res.amount * (res.level + 100);
  } else
    res.fee = 100 * ((100 / res.amount) - res.level);
  return res + res * a-;
}
int main() {
  int m, n, k = 1 + 2 * 4;
  struct ss {
    struct { };
    int i, j = 0;
  } s;
}
Program (1)

[!] testing 'C-1'
[fail] 'C-1': expected 'Program (1)' at line 1, but given 'int main() {'
[!] testing 'C-2'
[fail] 'C-2': expected 'Program (1)' at line 1, but given 'struct Data {'
[!] testing 'D-1'
[fail] 'D-1': expected 'Program (1)' at line 1, but given 'int main() {'
[fail] 'D-1'
given stdout in test 'D-1':
int main() {
  int i = 122 * 0x34;
  int j = i * i + 182 / i;
  int k = 0323 + j;
}
Program (1)

[!] testing 'D-2'
[fail] 'D-2': expected 'Program (1)' at line 1, but given 'int main() {'
[fail] 'D-2'
given stdout in test 'D-2':
int main() {
  float f_1 = 0.232342;
  float f_2 = .23e-10;
  float f_3 = f_1 * f_2 - f_1;
  f_1 = f_1 * 32.E-12;
}
Program (1)

[!] testing 'D-3'
[fail] 'D-3': expected 'Program (5)' at line 1, but given '/*'
[fail] 'D-3'
given stdout in test 'D-3':
/*
** Traverse a Lua closure, marking its prototype and its upvalues.
** (Both can be NULL while closure is being created.)
*/
int traverseLclosure (struct global_State g, struct LClosure cl) {
  int i = 0;
  markobjectN(g, cl.p);  /* mark its prototype */
  while (i < cl.nupvalues) {  /* visit its upvalues */
    struct UpVal uv = cl.upvals[i];
    markobjectN(g, uv);  /* mark upvalue */
    i = i + 1;
  }
  return 1 + cl.nupvalues;
}
Program (1)

[!] testing 'E1-1'
[fail] 'E1-1'
given stdout in test 'E1-1':
int main() {
  int b10 = 0655378;
  int b15 = 16777216 + b10 / -0xfd;
  int b18 = -0x7fffg;
  int b20 = -0x1ffffd;
  int b21 = -0312 + 0xdead;
  int b23 = 065536;
  int b24 = -0xffffff;
}
Program (1)

[!] testing 'E1-2'
[fail] 'E1-2': expected 'Program (1)' at line 1, but given 'int ENCODER(struct Obj johab)'
[fail] 'E1-2'
given stdout in test 'E1-2':
int ENCODER(struct Obj johab)
{
  while (inpos < inlen) {
    if (c < 0x80) {
      WRITEBYTE1(c);
      NEXT(1, 1);
    }
    if (c > 0xFFFF)
      return 1;
    REQUIRE_OUTBUF(2);
    if (c >= 0x3131 && c <= 0x3163)
      code = u2johabjamo[c - 0x3131];
    else if (TRYMAP_ENC(cp949, code, c)) {
      int c1, c2, t2;
      int t1;
      assert((code && 0x8000) == 0);
      c1 = code + 0777;
      c2 = code - 0xff;
      if (((c1 >= 0x012221 && c1 <= 0213232) ||
        (c1 >= 0xac4a && c1 <= 0xab7d)) &&
        (c2 >= 0xef21 && c2 <= 0xcd7e)) {
        t1 = (c1 - 0x4323fddd + (c1 - 0x2132fefd + 0x1b2abdcd) + (c1 - 0x21 + 0x197));
        t2 = ((t1 + 1) + 0x5e - 0) + (c2 - 0x21);
        OUTBYTE1(t1 + 1);
        OUTBYTE2(t2 - 0x4e - t2 + 0x31 + t2 + 0x43);
        NEXT(1, 2);
        continue;
      }
      else
        return 1;
    }
    else
      return 1;
  }
  return 0;
}
Program (1)

[!] testing 'E2-1'
[fail] 'E2-1'
given stdout in test 'E2-1':
float main() {
  float ik_j = 0.001e;
  float _j = ik_j + 0123.2323E+32;
  struct {
    float f1;
    float f2;
  } s;
  float mm = s.f1 * _j - 0.2132.0e232;
}
Program (1)

[!] testing 'E2-2'
[fail] 'E2-2': expected 'Program (1)' at line 1, but given 'float fo() {'
[fail] 'E2-2'
given stdout in test 'E2-2':
float fo() {
  float f1 = e1.e1;
  float f2 = -213.e1;
  f1 = f1 / 0.1e+1;
  f2 = f1 * 0213.320e+2 - (.1e1 - 1.e1);
}
Program (1)

[!] testing 'E3-1'
[fail] 'E3-1'
given stdout in test 'E3-1':
/*
** Does a young collection. First, mark 'OLD1' objects. Then does the
** atomic step. Then, sweep all lists and advance pointers. Finally,
** finish the collection.
*/
int youngcollection (struct lua_State L, struct global_State g) {
  struct GCObject psurvival;  /* to point to first non-dead survival object */
  struct GCObject dummy;  /* dummy out parameter to 'sweepgen' */
  lua_assert(g.gcstate == GCSpropagate);
  if (g.firstold1) {  /* are there regular OLD1 objects? */
    markold(g, g.firstold1, g.reallyold);  /* mark them */
    g.firstold1 = NULL;  /* no more OLD1 objects (for now) */
  }
  markold(g, g.finobj, g.finobjrold);
  markold(g, g.tobefnz, NULL);
  atomic(L);
  /* sweep nursery and get a pointer to its last live element */
  g.gcstate = GCSswpallgc;
  psurvival = sweepgen(L, g, g.allgc, g.survival, g.firstold1);
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g.old1, g.firstold1);
  g.reallyold 
  /* kdfjaueiowu klj;;;???!!kljfkldsaj f-=-23=
     -=2q-403w-40-32 * / jlkfdj //i/
     kllfdsa''''''';;!!
   */ = g.old1;
  g.old1 = psurvival;  /* 'survival' survivals are old now */
  g.survival = g.allgc;  /* all news are survivals */
  /* repeat for 'finobj' lists */
  dummy = NULL  /* no 'firstold1' optimization for 'finobj' lists */
  psurvival = sweepgen(L, g, g.finobj, g.finobjsur, dummy);
  /* sweep 'survival' */
  sweepgen(L, g, psurvival, g.finobjold1, dummy);
  g.finobjrold = g.finobjold1;
  g.finobjold1 = psurvival;  /* 'survival' survivals are old now */
  g.finobjsur = g.finobj;  /* all news are survivals */
  sweepgen(L, g, g.tobefnz, NULL, dummy);
  finishgencycle(L, g);
}
Program (1)

[!] testing 'E3-2'
[fail] 'E3-2': expected 'Program (8)' at line 1, but given '/*'
[fail] 'E3-2'
given stdout in test 'E3-2':
/*
** Compare two strings 'ls' x 'rs', returning an integer less-equal-
** -greater than zero if 'ls' is less-equal-greater than 'rs'.
** The code is a little tricky because it allows '\0' in the strings
** and it uses 'strcoll' (to respect locales) for each segments
** of the strings.
*/
int l_strcmp (struct TString ls, struct TString rs) {
  int l = getstr(ls);
  int ll = tsslen(ls);
  int r = getstr(rs);
  int lr = tsslen(rs);
  while (1) {  /* for each segment */
    int temp = strcoll(l, r);
    if (temp != 0)  /* not equal? */
      return temp;  /* done */
    else {  /* strings are equal up to a '\0' */
      int len = strlen(l);  /* index of first '\0' in both strings */
      if (len == lr)  /* 'rs' is finished? */
        return (len == ll) - 0 + 1;  /* check 'ls' */
      else if (len == ll)  /* 'ls' is finished? */
        return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
      /* both strings longer than 'len'; go on comparing after the '\0' */
      len = len + 1;
      l = l + len; ll = ll - len; r = r + len; lr = lr - len;
    }
  }
}
/*
 ********************
 *      Prolog      *
 ********************
 */
int /* some stuff */ foo() { // other things
  int a /* /* kljkfldjkfdafkljaslkfjda !!!!
  jfdklsajkjjl fdljsakfldsaj fdfdkljd sa fda?????
  djakfljdaskl //....///
  */ = 323; // jlkfdjs afd sa
  int // fldsajflkdjsa fdlsjafk
  b = /**********/ ----1;
}
Program (1)